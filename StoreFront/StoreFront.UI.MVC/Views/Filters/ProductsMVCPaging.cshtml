@*@model IEnumerable<StoreFront.DATA.EF.Product>*@
@model PagedList.IPagedList<StoreFront.DATA.EF.Product>

@using PagedList.Mvc;

@{
    ViewBag.Title = "Products";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("ProductsMVCPaging", "Filters", FormMethod.Get))
{
    ///////////Search form//////////////
    <div class="row">
        <div class="col-md-2 text-right" style="padding:.5em">
            <label for="searchFilter">Find by Category:</label>
        </div>
        <div class="col-md-6 text-center">@Html.TextBox("SearchString", ViewBag.SearchString as string)</div>
        <div class="col-md-2"><input type="submit" , value="Search" class="btn-success btn-warning" /></div>
        <div class="col-md-2 text-center">@Html.ActionLink("Reset", "ProductsMVCPaging", "Filters", null, new { @class = "btn btn-danger" })</div>
    </div>
}

<table class="table">
    <tr>
        <!--ADD FIRST OR DEFAULT TO retrieve the values-->
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().ProductName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().UnitPrice)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().Image)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstOrDefault().Category.CategoryName)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UnitPrice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Image)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.CategoryName)
            </td>
            @*<td>
                    @Html.ActionLink("Edit", "Edit", new { id=item.ProductID }) |
                    @Html.ActionLink("Details", "Details", new { id=item.ProductID }) |
                    @Html.ActionLink("Delete", "Delete", new { id=item.ProductID })
                </td>*@
        </tr>
    }

</table>

<hr style="border:2px solid darkgray" />
<!--Will display the page # out of how many-->
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

<!--Pager - shows current page and links to other pages(PagedList) w/o search functionality - updates pager to receive Search Value--->
@Html.PagedListPager(Model, page => Url.Action("ProductsMVCPaging", new { page }))

